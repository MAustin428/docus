For Cairgan

Teaching code with robots

Goal: To teach key coding concepts to children by having them give a robot step-by-step instructions to move through a maze. 

Materials:
Sheets of printer paper (min 16)
Robot avatar (must be able to define left, right, forward directionality)

Setup:
Mark one of the sheets as Start and one of the sheets as Finish with appropriate drawings. The Start paper should indicate direction to show which way the robot initially facing. The Finish paper does not need a direction; the robot can enter from any direction.
Arrange the paper in a 4x4 grid, similar to below:

[]  []  []  []
[]  []  []  []
[]  []  []  []
[]  []  []  []

Each paper represents a tile that the robot may traverse. The child's task is to provide a step-by-step list of instructions from the instruction set that will move the robot from the Start tile to the Finish tile. Secondary objectives are to minimize the number of actions needed, and to minimize the number of instructions needed.

Lesson 1: The Basics
New Tiles: Start (<S, S^, S>, Sv), Finish (F), Mountain (M)
Instruction Set: rotate left (L), rotate right (R), move forward (↑)

Ex 1.1
[]    []  []  []
[S>]  []  []  []
[]    []  []  [F]
[]    []  []  []

Ask your child to solve this puzzle. Let them work through it, but have them give you step-by-step instructions which you write down. If the child provides incorrect in, write them down and continue on. At the end, test the code by walking through each instruction in order. Keep in mind that rotations change the direction the robot of facing, but the robot stays on the same tile. If the child has made a mistake in their instructions, now is the opportunity to show that their instructions are incorrect, and give them the opportunity to correct it.

Possible solution:
1. R
2. ↑
3. L
4. ↑ x3

The goal is to complete the puzzle, but once a solution has been found, you should perform a code review with the child to see if a better solution exists. If it does, explain your thinking ("Do we need to make two turns? Can we reach the finish with only one rotation?"), and see if the child can improve their code. If not, explain how you would do it, and explain why you're doing it that way (fewer tiles traversed, fewer lines of code, etc). Congratulate the child on solving the puzzle.

Continue with more puzzles until your child feels comfortable with the concepts. If you like, you may add an impassable Mountain tile (M) to increase the challenge. 

Ex 1.2               Possible solution
[]  [S^]  []  []    | 1. R
[]  []    []  []    | 2. ↑ x2
[]  []    []  [F]   | 3. R
[]  []    []  []    | 4. ↑ x2

Ex 1.3               Possible solution
[]  [F]  []  []     | 1. L
[]  [M]  []  []     | 2. ↑
[]  [S^] []  []     | 3. R
[]  []   []  []     | 4. ↑ x2
                    | 5. R
                    | 6. ↑

Ex 1.4              Possible solution 
[]  []  []   []     | 1. R
[]  []  []   []     | 2. ↑
[]  []  [S^] []     | 3. R
[]  []  [F]  []     | 4. ↑
                    | 5. R
                    | 6. ↑

Lesson 2: Functions
New Tiles: Coins (C1, C2, C3...)
Instruction Set: rotate left (L), rotate right (R), move forward (↑), pick up (€)

Ex 2.1              Possible solution
[S>] [] [C1]  []    | 1. ↑ x2
[]  []  [C2]  [F]   | 2. € C1
                    | 3. R
                    | 4. ↑
                    | 5. € C2
                    | 6. L
                    | 7. ↑

This puzzle introduces Coins. All coins must be collected before finishing a puzzle. Numbered Coins must be collected in the correct order, (eg, C1->C2->C3).

Ex 2.2
[]  [C2]  [C4]  [S>]  [C3]  [F]  [C1]  [C5]
[]  []  []  []  []  []  []  []

Possible solution:
1. ↑ x3
2. € C1
3. R x2
4. ↑ x5
5. € C2
6. R x2
7. ↑ x3
8. € C3
9. R x2
10. ↑ x2
11. € C4
12. R x2
13. ↑ x5
14. € C5
15. R x2
16. ↑ x2

After the child solves this puzzle, point out how much writing was needed. Remind them how you wrote ↑ x3 to cut down on writing, and ask them if they have an idea on how to use that concept to rewrite your code.
Introduce the idea of a 'fun collection of useful actions', or 'function' for short. Explain that one possible function could be 'pick up and turn around (€, L x2). Ask them if there are any functions they want to create. Stress to them that, unlike the instruction set, they get to decide what goes into a function.

